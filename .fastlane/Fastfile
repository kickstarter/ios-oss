fastlane_version "2.28.3"

default_platform :ios

platform :ios do
  ### MATCH
  desc "Fastlane Match"
  lane :match_all do
    setup_circle_ci
    match_appstore
    match_development
    match_enterprise
  end

  desc "Fastlane Match - App Store"
  private_lane :match_appstore do
    match(
      app_identifier: ["com.kickstarter.kickstarter"],
      type: "appstore",
      git_url: "https://github.com/kickstarter/ios-certificates",
      team_id: "48YBP49Y5N",
      git_branch: "ksr",
      username: "appledev@kickstarter.com"
    )
  end

  desc "Fastlane Match - Development"
  private_lane :match_development do
    match(
      app_identifier: [
        "com.kickstarter.kickstarter",
        "com.kickstarter.kickstarter.debug"
      ],
      type: "development",
      git_url: "https://github.com/kickstarter/ios-certificates",
      team_id: "48YBP49Y5N",
      git_branch: "ksr",
      username: "appledev@kickstarter.com",
      force_for_new_devices: true
    )
  end

  desc "Fastlane Match - Enterprise"
  private_lane :match_enterprise do
    match(
      app_identifier: [
        "com.kickstarter.kickstarter.beta",
        "com.kickstarter.kickstarter.kickalpha"
      ],
      type: "enterprise",
      git_url: "https://github.com/kickstarter/ios-certificates",
      team_id: "5DAN4UM3NC",
      git_branch: "ksr-enterprise",
      username: "appledev@kickstarter.com",
      force_for_new_devices: true
    )
  end

  ### BETA

  lane :beta_match_gym_hockey do
    match_all
    beta_gym
    beta_hockey
  end

  desc "Build Beta"
  lane :beta_gym do
    build_the_app(
      output_name: "KickBeta",
      export_method: "enterprise",
      configuration: "Hockey Beta"
    )
  end

  desc "Upload Beta to HockeyApp"
  lane :beta_hockey do
    upload_hockey(
      ipa: "./output/gym/KickBeta.ipa",
      public_identifier: ENV["HOCKEY_BETA_APP_ID"]
    )

    upload_dsyms(dsym: "./output/gym/KickBeta.app.dSYM.zip")

    slack(
      slack_url: ENV["SLACK_WEBHOOK"],
      message: slack_message(
        "beta",
        get_version_number(xcodeproj: "Kickstarter.xcodeproj", target: "Kickstarter-iOS"),
        get_build_number(xcodeproj: "Kickstarter.xcodeproj"),
        "HockeyApp"
      )
    )
  end

  ### PRODUCTION

  lane :itunes_match_gym_deliver_hockey do
    match_all
    itunes_gym
    itunes_deliver
    itunes_hockey
  end

  desc "Build Production"
  lane :itunes_gym do
    build_the_app(
      output_name: "Kickstarter",
      export_method: "app-store",
      configuration: "Release"
    )
  end

  desc "Upload Production to HockeyApp"
  lane :itunes_hockey do
    upload_hockey(
      ipa: "./output/gym/Kickstarter.ipa",
      public_identifier: ENV["HOCKEY_RELEASE_APP_ID"]
    )
  end

  desc "Upload to the App Store"
  lane :itunes_deliver do

    deliver(
      force: true,
      username: ENV["ITUNES_CONNECT_ACCOUNT"],
      app_identifier: ENV["ITUNES_APP_IDENTIFIER"],
      app: ENV["ITUNES_APP_ID"],
      ipa: "./output/gym/Kickstarter.ipa",
      team_name: ENV["ITUNES_TEAM_NAME"],
      skip_screenshots: true,
      skip_metadata: true
    )

    slack(
      slack_url: ENV["SLACK_WEBHOOK"],
      message: slack_message(
        "app store",
        get_version_number(xcodeproj: "Kickstarter.xcodeproj", target: "Kickstarter-iOS"),
        get_build_number(xcodeproj: "Kickstarter.xcodeproj"),
        "App Store Connect ðŸš€"
      )
    )

    upload_dsyms(dsym: "./output/gym/Kickstarter.app.dSYM.zip")
  end

  ### ALPHA
  lane :alpha_match_gym_hockey do
    match_all
    alpha_gym
    alpha_hockey
  end

  desc "Build Alpha"
  lane :alpha_gym do
    build_the_app(
      output_name: "KickAlpha",
      export_method: "enterprise",
      configuration: "Hockey Alpha"
    )
  end

  desc "Upload Alpha to HockeyApp"
  lane :alpha_hockey do
    upload_hockey(
      ipa: "./output/gym/KickAlpha.ipa",
      public_identifier: ENV["HOCKEY_ALPHA_APP_ID"]
    )

    upload_dsyms(dsym: "./output/gym/KickAlpha.app.dSYM.zip")

    slack(
      slack_url: ENV["SLACK_WEBHOOK"],
      message: slack_message(
        "alpha",
        get_version_number(xcodeproj: "Kickstarter.xcodeproj", target: "Kickstarter-iOS"),
        get_build_number(xcodeproj: "Kickstarter.xcodeproj"),
        "HockeyApp"
      )
    )
  end

  ### SHARED

  desc "Download App Store dSYMs and upload to Crashlytics"
  lane :refresh_dsyms do |options|
    download_dsyms(
      username: ENV["ITUNES_CONNECT_ACCOUNT"],
      app_identifier: ENV["ITUNES_APP_IDENTIFIER"],
      team_name: ENV["ITUNES_TEAM_NAME"],
      version: "latest"
    )

    upload_dsyms # Paths are taken from lane_context[SharedValues::DSYM_PATHS] automatically
    clean_build_artifacts

    slack(
      slack_url: ENV["SLACK_WEBHOOK"],
      message: "Successfully refreshed dSYMs for the latest App Store version"
    )
  end

  private_lane :build_the_app do |options|
    export_options = {}

    unless options[:configuration].eql? "Release"
      # Disable bitcode for enterprise builds
      export_options = {
        includeBitcode: false,
        compileBitcode: false
      }
    end

    gym(
      output_name: options[:output_name],
      export_method: options[:export_method],
      scheme: "Kickstarter-iOS",
      configuration: options[:configuration],
      export_options: export_options
    )
  end

  private_lane :upload_hockey do |options|
    notes = changelog
    hockey(
      api_token: ENV["HOCKEY_APP_TOKEN"],
      ipa: options[:ipa],
      public_identifier: options[:public_identifier],
      repository_url: ENV["CIRCLE_REPOSITORY_URL"],
      build_server_url: ENV["CIRCLE_BUILD_URL"],
      commit_sha: ENV["CIRCLE_SHA1"],
      notes: notes,
      bypass_cdn: true,
      notify: "1"
    )
  end

  private_lane :upload_dsyms do |options|
    upload_symbols_to_crashlytics(
      dsym_path: options[:dsym], 
      api_token: ENV["FABRIC_API_KEY"],
      binary_path: "./bin/upload-symbols"
    )
  end

  ### HELPERS
  ### Grabs the last commit message into a changelog
  private_lane :changelog do
    changelog_from_git_commits(
      commits_count: 1,
      date_format: "short"
    )
  end

  desc "Commit history from a given tag"
  lane :commit_history do |options|
    changelog_from_git_commits(
      between: [options[:tag], "master"],
      pretty: "- %s",
      date_format: "short",
      match_lightweight_tag: false,
      merge_commit_filtering: "exclude_merges"
    )
  end

  def slack_message(type, version_number, build_number, platform)
    "[#{type.upcase}] uploaded v#{version_number} (#{build_number}) of the Kickstarter iOS app to #{platform}"
  end

  after_all do |lane|
  end

  error do |lane, exception|
  end
end
