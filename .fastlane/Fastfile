fastlane_version "2.28.3"

default_platform :ios

platform :ios do
  before_all do
    setup_circle_ci
    xcversion(version: ENV["XCODE_VERSION"] || "9.3")
  end

  ### MATCH

  desc "Fastlane Match"
  lane :match_all do
    match_appstore
    match_development
    match_enterprise
  end

  desc "Fastlane Match - App Store"
  private_lane :match_appstore do
    match(
      app_identifier: ["com.kickstarter.drip", "com.kickstarter.kickstarter"],
      type: "appstore",
      git_url: "https://github.com/kickstarter/ios-certificates",
      team_id: "48YBP49Y5N",
      git_branch: "ksr",
      username: "appledev@kickstarter.com"
    )
  end

  desc "Fastlane Match - Development"
  private_lane :match_development do
    match(
      app_identifier: [
        "com.kickstarter.drip",
        "com.kickstarter.drip.debug",
        "com.kickstarter.kickstarter",
        "com.kickstarter.kickstarter.alpha",
        "com.kickstarter.kickstarter.debug"
      ],
      type: "development",
      git_url: "https://github.com/kickstarter/ios-certificates",
      team_id: "48YBP49Y5N",
      git_branch: "ksr",
      username: "appledev@kickstarter.com",
      force_for_new_devices: true
    )
  end

  desc "Fastlane Match - Enterprise"
  private_lane :match_enterprise do
    match(
      app_identifier: [
        "com.kickstarter.drip.beta", "com.kickstarter.kickstarter.beta"
      ],
      type: "enterprise",
      git_url: "https://github.com/kickstarter/ios-certificates",
      team_id: "5DAN4UM3NC",
      git_branch: "ksr-enterprise",
      username: "appledev@kickstarter.com",
      force_for_new_devices: true
    )
  end

  ### BETA

  lane :beta_match_gym_hockey do
    match_all
    beta_gym
    beta_hockey
  end

  desc "Build Beta"
  lane :beta_gym do
    build_the_app(
      output_name: "KickBeta",
      export_method: "enterprise",
      configuration: "Hockey Beta"
    )
  end

  desc "Upload Beta to HockeyApp"
  lane :beta_hockey do
    upload_hockey(
      ipa: "./output/gym/KickBeta.ipa",
      dsym: "./output/gym/KickBeta.app.dSYM.zip",
      public_identifier: ENV["HOCKEY_BETA_APP_ID"]
    )
  end

  ### PRODUCTION

  lane :itunes_match_gym_deliver_hockey do
    match_all
    itunes_gym
    itunes_deliver
    itunes_hockey
  end

  desc "Build Production"
  lane :itunes_gym do
    build_the_app(
      output_name: "Kickstarter",
      export_method: "app-store",
      configuration: "Release"
    )
  end

  desc "Upload Production to HockeyApp"
  lane :itunes_hockey do
    upload_hockey(
      ipa: "./output/gym/Kickstarter.ipa",
      dsym: "./output/gym/Kickstarter.app.dSYM.zip",
      public_identifier: ENV["HOCKEY_RELEASE_APP_ID"]
    )
  end

  desc "Upload to the app store"
  lane :itunes_deliver do

    deliver(
      force: true,
      username: ENV["ITUNES_CONNECT_ACCOUNT"],
      app_identifier: ENV["ITUNES_APP_IDENTIFIER"],
      app: ENV["ITUNES_APP_ID"],
      ipa: "./output/gym/Kickstarter.ipa",
      team_id: ENV["ITUNES_TEAM_ID"],
      skip_screenshots: true,
      skip_metadata: true
    )

    slack(
      slack_url: ENV["SLACK_WEBHOOK"],
      message: "Successfully uploaded" +
        " v" + get_version_number(xcodeproj: "Kickstarter.xcodeproj", target: "Kickstarter-iOS") +
        " (" + get_build_number(xcodeproj: "Kickstarter.xcodeproj") + ")" +
        " of the Kickstarter iOS app to iTunes Connect ðŸš€"
    )
  end

  ### ALPHA

  desc "Build Alpha"
  lane :alpha_gym do
    build_the_app(
      output_name: "KickAlpha",
      export_method: "enterprise",
      configuration: "Hockey Alpha"
    )
  end

  desc "Upload Alpha to HockeyApp"
  lane :alpha_hockey do
    upload_hockey(
      ipa: "./output/gym/KickAlpha.ipa",
      dsym: "./output/gym/KickAlpha.app.dSYM.zip",
      public_identifier: ENV["HOCKEY_ALPHA_APP_ID"]
    )
  end

  ### SHARED

  private_lane :build_the_app do |options|
    gym(
      output_name: options[:output_name],
      export_method: options[:export_method],
      scheme: "Kickstarter-iOS",
      configuration: options[:configuration]
    )
  end

  private_lane :upload_hockey do |options|
    hockey(
      api_token: ENV["HOCKEY_APP_TOKEN"],
      ipa: options[:ipa],
      dsym: options[:dsym],
      public_identifier: options[:public_identifier],
      repository_url: ENV["CIRCLE_REPOSITORY_URL"],
      build_server_url: ENV["CIRCLE_BUILD_URL"],
      commit_sha: ENV["CIRCLE_SHA1"],
      notes: "CircleCI build " + ENV["CIRCLE_BUILD_NUM"],
      bypass_cdn: true,
      notify: "1"
    )
  end

  after_all do |lane|
  end

  error do |lane, exception|
  end
end
