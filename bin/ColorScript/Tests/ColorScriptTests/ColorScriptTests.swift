import Foundation
import XCTest
import ColorScriptCore
import ColorScript

final class ColorScriptTests: XCTestCase {

  let json = """
          {
            "apricot_600": "FFCBA9",
            "cobalt_500": "4C6CF8",
            "dark_grey_400": "9B9E9E",
            "dark_grey_500": "656868"
          }
          """
  func testDataNil_InvalidJSON() {
    let invalidJson = """
          {
            "dark_grey_400": "9B9E9E",
            "dark_grey_500": true
          }
          """
    guard let data = invalidJson.data(using: .utf8) else {
      XCTFail("Data cannot be nil")
      return
    }

    let colors = Color(data: data)
    let decodedColors = try? colors.colors()
    XCTAssertNil(decodedColors as? [(key: String, value: String)])
  }

  func testDataIsNotNil_ValidJSON() {
    guard let data = self.json.data(using: .utf8) else {
      XCTFail("Data cannot be nil")
      return
    }
    let colors = Color(data: data)
    let decodedColors = try? colors.colors()
    XCTAssertNotNil(decodedColors as? [(key: String, value: String)])
  }

  func testColorNameFormat() {
    guard let data = self.json.data(using: .utf8) else {
      XCTFail("Data cannot be nil")
      return
    }
    let colors = Color(data: data)
    colors.allColors.forEach { (arg: (key: String, value: [(key: Int, value: String)])) in

      let (key, value) = arg
      guard let weight = value.first?.key else {
        XCTFail("value should contain at least 1 element")
        return
      }
      let colorName = key.lowercased()
      let formattedName = weight > 0 ? "ksr_\(colorName.replacingOccurrences(of: " ", with: "_"))_\(weight)" :
                                       "ksr_\(colorName.replacingOccurrences(of: " ", with: "_"))"

      XCTAssertEqual(
        value.first?.value, formattedName
      )
    }
  }

  func testAutogeneratedOutput() {
    let json = """
          {
            "apricot_600": "FFCBA9"
          }
          """
    guard let data = json.data(using: .utf8) else {
      XCTFail("Data cannot be nil")
      return
    }
    let colors = Color(data: data)

    let output = """
                 //===============================================================
                 //
                 // This file is computer generated from Colors.json. Do not edit.
                 //
                 //===============================================================

                 import UIKit

                 // swiftlint:disable valid_docs
                 extension UIColor {
                   public static var ksr_allColors: [String: [Int: UIColor]] {
                     return [
                       "Apricot": [
                         600: .ksr_apricot_600
                       ]
                     ]
                   }

                   /// 0xFFCBA9
                   public static var ksr_apricot_600: UIColor {
                     return .hex(0xFFCBA9)
                   }
                 }

                 """
    do {
      let generatedCode = try colors.staticStringsLines().joined(separator: "\n")
      XCTAssertEqual(output, generatedCode)
    } catch {
      XCTFail("Code should be generated by colors.staticStringsLines()")
    }
  }

  static var allTests = [
      ("testDataIsNotNil_ValidJSON", testDataIsNotNil_ValidJSON),
      ("testDataNil_InvalidJSON", testDataNil_InvalidJSON),
      ("testColorNameFormat", testColorNameFormat),
      ("testAutogeneratedOutput", testAutogeneratedOutput)
  ]
}
