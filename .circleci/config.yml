version: 2.1

orbs:
  codecov: codecov/codecov@1.1.1

xcode_version: &xcode_version 11.6.0
iphone_name: &iphone_name iPhone 8
preload_simulator: &preload_simulator xcrun instruments -w "iPhone 8 (13.6) [" || true

default_environment: &default_environment
  CIRCLE_ARTIFACTS: /tmp
  BUNDLE_PATH: vendor/bundle
  FL_OUTPUT_DIR: output
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8
  IPHONE_NAME: *iphone_name
  XCODE_VERSION: *xcode_version
  PLATFORM: iOS

base_job: &base_job
  macos:
    xcode: *xcode_version
  working_directory: ~/kickstarter

test_job: &test_job
  steps:
    - checkout
    - run:
        name: Store Xcode Version
        command: xcodebuild -version > xcode_version.txt
    - restore_cache:
        name: Restore Carthage Cache
        keys:
          - carthage-cache-{{ checksum "Cartfile.resolved" }}-{{ checksum "xcode_version.txt" }}
    - run:
        name: Bootstrap
        command: make bootstrap
    - run:
        name: Pre-load simulator
        command: *preload_simulator # Note we may no longer need to preload the simulator, this was a workaround before.
    - run:
        name: Run tests
        command: make test
        no_output_timeout: "20m" # 20 minutes
    - restore_cache:
        name: Restore Bundler
        keys:
          - v1-gems-{{ checksum "Gemfile.lock" }}
    - run:
        name: Install Bundler
        command: bundle check || bundle install
        environment:
          BUNDLE_JOBS: 4
          BUNDLE_RETRY: 3
    - run:
        name: Generate Slather coverage report
        command: bundle exec slather coverage -x --scheme $SCHEME ./Kickstarter.xcodeproj
    - codecov/upload:
        file: cobertura.xml

jobs:
  build-and-cache:
    <<: *base_job
    environment:
      - *default_environment
    steps:
      - checkout

      - run:
          name: Store Xcode Version
          command: xcodebuild -version > xcode_version.txt

      - restore_cache:
          name: Restore Carthage Cache
          keys:
            - carthage-cache-{{ checksum "Cartfile.resolved" }}-{{ checksum "xcode_version.txt" }}

      - run:
          name: Bootstrap
          command: make bootstrap

      - save_cache:
          name: Cache Carthage
          key: carthage-cache-{{ checksum "Cartfile.resolved" }}-{{ checksum "xcode_version.txt" }}
          paths:
            - Carthage

      - restore_cache:
          name: Restore Bundler
          keys:
            - v1-gems-{{ checksum "Gemfile.lock" }}

      - run:
          name: Install Bundler
          command: bundle check || bundle install
          environment:
            BUNDLE_JOBS: 4
            BUNDLE_RETRY: 3

      - save_cache:
          name: Cache Bundler
          key: v1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Danger
          command: bin/danger.sh

  # Kickstarter tests
  kickstarter-tests:
    <<: *base_job
    <<: *test_job
    environment:
      - *default_environment
      - SCHEME=Kickstarter-Framework-iOS

  # Library tests
  library-tests:
    <<: *base_job
    <<: *test_job
    environment:
      - *default_environment
      - TARGET=Library
      - SCHEME=Library-iOS

  # Kickstarter UI Tests
  kickstarter-ui-tests:
    <<: *base_job
    environment:
      - *default_environment
    steps:
      - checkout

      - run:
          name: Store Xcode Version
          command: xcodebuild -version > xcode_version.txt

      - restore_cache:
          name: Restore Carthage Cache
          keys:
            - carthage-cache-{{ checksum "Cartfile.resolved" }}-{{ checksum "xcode_version.txt" }}

      - run:
          name: Bootstrap
          command: make bootstrap

      - run:
          name: Pre-load simulator
          command: *preload_simulator

      - run:
          name: Kickstarter UI Tests
          command: SCHEME=KickstarterUITests make test
          no_output_timeout: "20m" # 20 minutes

  # KsApi tests
  ksapi-tests:
    <<: *base_job
    <<: *test_job
    environment:
      - *default_environment
      - SCHEME=KsApi

  deploy_alpha:
    <<: *base_job
    environment:
      - *default_environment
    steps:
      - checkout
      - run:
          name: Deploy Alpha
          command: make alpha

  deploy_beta:
    <<: *base_job
    environment:
      - *default_environment
    steps:
      - checkout
      - run:
          name: Deploy Beta
          command: make beta

  # AppCenter and S3 bucket beta
  beta:
    <<: *base_job
    environment:
      - *default_environment
    steps:
      - checkout

      - run:
          name: Store Xcode Version
          command: xcodebuild -version > xcode_version.txt

      - restore_cache:
          name: Restore Carthage Cache
          keys:
            - carthage-cache-{{ checksum "Cartfile.resolved" }}-{{ checksum "xcode_version.txt" }}

      - run:
          name: Bootstrap
          command: make bootstrap

      - restore_cache:
          keys:
            - v1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install
          environment:
            BUNDLE_JOBS: 4
            BUNDLE_RETRY: 3
      - save_cache:
          key: v1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Increment build number
          command: agvtool new-version -all $(($(date +%s)/100))

      - run:
          name: Fastlane
          command: bundle exec fastlane beta_match_gym_appcenter_s3 --verbose
          no_output_timeout: "30m" # 30 minutes

      - run:
          name: Upload dSYMs
          command: bin/upload-dysms-firebase.sh Firebase-Alpha KickBeta.app.dSYM.zip

      - run:
          name: Cleanup Temp Branch
          command: make cleanup

      - store_artifacts:
          path: /tmp/xcode_raw.log

      - store_artifacts:
          path: output

  # AppCenter Alpha
  alpha:
    <<: *base_job
    environment:
      - *default_environment
    steps:
      - checkout

      - run:
          name: Store Xcode Version
          command: xcodebuild -version > xcode_version.txt

      - restore_cache:
          name: Restore Carthage Cache
          keys:
            - carthage-cache-{{ checksum "Cartfile.resolved" }}-{{ checksum "xcode_version.txt" }}

      - run:
          name: Bootstrap
          command: make bootstrap

      - restore_cache:
          keys:
            - v1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install
          environment:
            BUNDLE_JOBS: 4
            BUNDLE_RETRY: 3
      - save_cache:
          key: v1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Increment build number
          command: agvtool new-version -all $(($(date +%s)/100))

      - run:
          name: Fastlane
          command: bundle exec fastlane alpha_match_gym_appcenter --verbose
          no_output_timeout: "30m" # 30 minutes

      - run:
          name: Upload dSYMs
          command: bin/upload-dysms-firebase.sh Firebase-Alpha KickAlpha.app.dSYM.zip

      - store_artifacts:
          path: /tmp/xcode_raw.log

      - store_artifacts:
          path: output

  refresh_app_store_dsyms:
    <<: *base_job
    environment:
      - *default_environment
    steps:
      - checkout

      - run:
          name: Store Xcode Version
          command: xcodebuild -version > xcode_version.txt

      - restore_cache:
          name: Restore Carthage Cache
          keys:
            - carthage-cache-{{ checksum "Cartfile.resolved" }}-{{ checksum "xcode_version.txt" }}

      - run:
          name: Bootstrap
          command: make bootstrap

      - restore_cache:
          keys:
            - v1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install
          environment:
            BUNDLE_JOBS: 4
            BUNDLE_RETRY: 3
      - save_cache:
          key: v1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Download dSYMs and upload to Crashlytics
          command: bundle exec fastlane refresh_dsyms

  # iTunes
  itunes:
    <<: *base_job
    environment:
      - *default_environment
    steps:
      - checkout

      - run:
          name: Store Xcode Version
          command: xcodebuild -version > xcode_version.txt

      - restore_cache:
          name: Restore Carthage Cache
          keys:
            - carthage-cache-{{ checksum "Cartfile.resolved" }}-{{ checksum "xcode_version.txt" }}

      - run:
          name: Bootstrap
          command: make bootstrap

      - restore_cache:
          keys:
            - v1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install
          environment:
            BUNDLE_JOBS: 4
            BUNDLE_RETRY: 3
      - save_cache:
          key: v1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Increment build number
          command: agvtool new-version -all $(($(date +%s)/100))

      - run:
          name: Fastlane
          command: bundle exec fastlane itunes_match_gym_deliver --verbose
          no_output_timeout: "30m" # 30 minutes

      - run:
          name: Upload dSYMs
          command: bin/upload-dysms-firebase.sh Firebase-Production Kickstarter.app.dSYM.zip

      - store_artifacts:
          path: /tmp/xcode_raw.log

      - store_artifacts:
          path: output

# Workflows
workflows:
  version: 2
  build:
    jobs:
      - build-and-cache
      - kickstarter-tests
      - kickstarter-ui-tests
      - library-tests
      - ksapi-tests
      - refresh_app_store_dsyms:
          filters:
            branches:
              # matches all branches that begin with 'beta-dist'
              only: /beta-dist-.*/
      - deploy_alpha:
          filters:
            branches:
              # matches all branches that contain 'feature' but do not contain 'alpha-dist'
              only: /^((?!alpha\-dist).*feature.*)*$/
          requires:
            - build-and-cache
            - kickstarter-tests
            - kickstarter-ui-tests
            - library-tests
            - ksapi-tests
      - deploy_beta:
          filters:
            branches:
              only: master
          requires:
            - build-and-cache
            - kickstarter-tests
            - kickstarter-ui-tests
            - library-tests
            - ksapi-tests
      - beta:
          filters:
            branches:
              # matches all branches that begin with 'beta-dist'
              only: /beta-dist-.*/
          requires:
            - build-and-cache
            - kickstarter-tests
            - kickstarter-ui-tests
            - library-tests
            - ksapi-tests
      - alpha:
          filters:
            branches:
              # matches all branches that begin with 'alpha-dist'
              only: /alpha-dist.*/
          requires:
            - build-and-cache
            - kickstarter-tests
            - kickstarter-ui-tests
            - library-tests
            - ksapi-tests
      - itunes:
          filters:
            branches:
              # matches branch named exactly `itunes-dist`
              only: itunes-dist
          requires:
            - build-and-cache
            - kickstarter-tests
            - kickstarter-ui-tests
            - library-tests
            - ksapi-tests

experimental:
  notify:
    branches:
      only:
        # matches branch named exactly `master`
        - master
        # matches all branches that begin with 'alpha-dist'
        - /alpha-dist.*/
        # matches all branches that begin with 'beta-dist'
        - /beta-dist-.*/
        # matches branch named exactly `itunes-dist`
        - itunes-dist
